---
description: 
globs: 
alwaysApply: true
---
# .cursorrules – QuickThumb (Cloudflare Pages edition)
# Zero-backend YouTube thumbnail fetcher with toast notifications.

# PROJECT REQUIREMENT DOCUMENT
## Project Name: QuickThumb

## 1. Vision
Single static page: paste a YouTube URL → toast feedback → display thumbnail → copy or download. Hosted on Cloudflare Pages.

## 2. Core User Story
“As a user I paste a link, press Fetch, get instant toast feedback, see the thumbnail, then copy its URL or download the file.”

## 3. Functional Requirements
- URL input with instant validation  
- Fetch button (disabled until valid)  
- Toast notifications (success / error / info)  
- Fallback thumbnail chain (maxres → hq → mq → sd)  
- Copy & download buttons  
- Responsive layout  
- Accessible color contrast  

## 4. Non-Functional Requirements
- 100 % static (HTML+CSS+JS)  
- Deploy to Cloudflare Pages (free)  
- ≤ 40 KB total (incl. toast CSS)  
- No cookies / tracking  

## 5. Tech Stack
HTML5 + TailwindCSS CDN (for quick styling) + Vanilla JS  
Toast lib: `https://cdn.jsdelivr.net/npm/toastify-js@1.12.0`  

## 6. File Structure
/  
├─ index.html  
├─ style.css (optional overrides)  
├─ app.js  
└─ README.md  

## 7. Algorithm (pseudo)
onClickFetch()
  a. parse URL → videoId
  b. try thumbnails in order [maxres, hq, mq, sd]
  c. if any loads → toast success + show
  d. else → toast error

## 8. Build & Deploy (Cloudflare Pages)
1. `git init && git add . && git commit -m "v1"`
2. Push to GitHub (public or private).
3. Cloudflare dashboard → Pages → “Create a project” → connect GitHub repo.
4. Build command: (leave empty, we’re static).
5. Output directory: `/`.
6. Deploy → ~30 s live at `https://quickthumb.pages.dev`.


## 9. File Snippets

### index.html
```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <title>QuickThumb – Cloudflare Pages</title>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"/>
  <link rel="stylesheet" href="style.css"/>
</head>
<body class="bg-slate-100 text-slate-800 flex flex-col items-center min-h-screen p-4">
  <header class="my-8 text-center">
    <h1 class="text-4xl font-bold text-sky-600">QuickThumb</h1>
    <p class="text-slate-600">Instant YouTube thumbnail downloader</p>
  </header>

  <main class="w-full max-w-lg">
    <input id="url" type="url" placeholder="https://www.youtube.com/watch?v=dQw4w9WgXcQ"
           class="w-full px-4 py-2 rounded border border-slate-300 focus:outline-none focus:ring-2 focus:ring-sky-500"/>
    <button id="fetchBtn" disabled
            class="mt-3 w-full bg-sky-600 text-white py-2 rounded disabled:opacity-50">
      Fetch
    </button>

    <div id="result" class="hidden mt-6 text-center">
      <img id="thumb" alt="Thumbnail" class="mx-auto rounded shadow"/>
      <div class="mt-4 space-x-2">
        <button id="copyBtn" class="bg-slate-200 px-4 py-2 rounded">Copy URL</button>
        <a id="downloadBtn" class="bg-green-600 text-white px-4 py-2 rounded inline-block" download>Download</a>
      </div>
    </div>
  </main>

  <footer class="mt-auto py-4 text-sm text-slate-500">© 2025 – open source</footer>

  <script src="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.js"></script>
  <script src="app.js"></script>
</body>
</html>
```

### app.js
```js
const urlInput  = document.getElementById('url');
const fetchBtn  = document.getElementById('fetchBtn');
const resultBox = document.getElementById('result');
const thumbImg  = document.getElementById('thumb');
const copyBtn   = document.getElementById('copyBtn');
const downloadBtn = document.getElementById('downloadBtn');

const qualities = ['maxresdefault', 'hqdefault', 'mqdefault', 'sddefault'];

function toast(msg, type = 'info') {
  const colors = { success: '#10b981', error: '#ef4444', info: '#3b82f6' };
  Toastify({ text: msg, duration: 3000, gravity: 'top', position: 'center',
             style: { background: colors[type] } }).showToast();
}

function getVideoId(str) {
  try {
    const url = new URL(str);
    if (url.hostname === 'youtu.be') return url.pathname.slice(1);
    if (url.hostname.includes('youtube.com')) return new URLSearchParams(url.search).get('v');
  } catch { /* invalid URL */ }
  return null;
}

urlInput.addEventListener('input', () => {
  fetchBtn.disabled = !getVideoId(urlInput.value);
});

fetchBtn.addEventListener('click', async () => {
  const id = getVideoId(urlInput.value);
  if (!id) { toast('Invalid YouTube URL', 'error'); return; }

  resultBox.classList.add('hidden');
  toast('Fetching…', 'info');

  // Try qualities in order
  for (const q of qualities) {
    const src = `https://img.youtube.com/vi/${id}/${q}.jpg`;
    const ok = await new Promise(resolve => {
      const img = new Image();
      img.onload  = () => resolve(true);
      img.onerror = () => resolve(false);
      img.src = src;
    });
    if (ok) {
      thumbImg.src = src;
      downloadBtn.href = src;
      downloadBtn.download = `${id}.jpg`;
      resultBox.classList.remove('hidden');
      toast('Thumbnail loaded!', 'success');
      return;
    }
  }
  toast('Thumbnail unavailable for this video', 'error');
});

copyBtn.addEventListener('click', () => {
  navigator.clipboard.writeText(thumbImg.src);
  toast('URL copied to clipboard', 'success');
});
```

## 10. Done Definition
- Live on `https://quickthumb.pages.dev`
- Any YouTube URL (public or unlisted) shows the thumbnail with toast feedback
- Copy & download both work without errors

